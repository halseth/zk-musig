// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use clap::builder::Str;
use clap::Parser;
use hex;
use methods::{GUEST_CODE_FOR_ZK_PROOF_ELF, GUEST_CODE_FOR_ZK_PROOF_ID};
use musig2::{
    compute_challenge_hash_tweak, verify_partial_challenge, AggNonce, KeyAggContext,
    PartialSignature, PubNonce, SecNonce,
};
use risc0_zkvm::{default_prover, ExecutorEnv};
use secp256k1::PublicKey;
use serde::{Deserialize, Serialize};
use std::str::FromStr;

#[derive(Debug, Parser)]
#[command(verbatim_doc_comment)]
struct Args {
    #[arg(long)]
    cfg: Option<String>,
}

#[derive(Deserialize, Serialize, Debug, Clone)]
struct Config {
    pub coeff_salt: String,
    pub blinding_factors: Vec<(String, String, String)>,
    pub pubkeys: Vec<String>,
    pub pubnonces: Vec<String>,
    //pub message: String,
}

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let message = "hello interwebz!";

    let args = Args::parse();
    let cfg: Config = serde_json::from_str(&args.cfg.unwrap()).unwrap();
    println!("config: {:?}", cfg);

    let coeff_salt: [u8; 32] = hex::decode(cfg.coeff_salt).unwrap().try_into().unwrap();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // A default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // For example:
    let input: usize = 0;
    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .write(&coeff_salt)
        .unwrap()
        .write(&cfg.blinding_factors)
        .unwrap()
        .write(&cfg.pubkeys)
        .unwrap()
        .write(&cfg.pubnonces)
        .unwrap()
        .write(&message)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover.prove(env, GUEST_CODE_FOR_ZK_PROOF_ELF).unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let pubkey: String = receipt.journal.decode().unwrap();
    let pubnonce: String = receipt.journal.decode().unwrap();
    let challenge_parity: u8 = receipt.journal.decode().unwrap();
    let nonce_parity: u8 = receipt.journal.decode().unwrap();
    let b: String = receipt.journal.decode().unwrap();
    let e: String = receipt.journal.decode().unwrap();

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt.verify(GUEST_CODE_FOR_ZK_PROOF_ID).unwrap();
}
